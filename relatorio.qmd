---
title: "Regressão Linear no RStudio"
author: "Saulo Morellato"
format: pdf
editor: visual
---

# Introdução

## Objetivo Geral

Estabelecer uma função que descreva a relação entre uma variável contínua $Y$ (variável resposta) e uma ou mais variáveis de apoio $X_1, X_2,\dots, X_p$ (covariáveis) na forma $$Y=f(X_1,X_2,\ldots,X_p)+\epsilon$$ sendo $\epsilon$ um erro aleatório.

## Erro Aleatório

Possíveis explicações para a presença do erro aleatório no modelo são:

-   Caráter vago da teoria;

-   Falta de dados disponíveis;

-   Caráter aleatório da natureza;

-   Escolha equivocada para a forma funcional.

# Regressão Linear

## Objetivo

-   Na Análise de Regressão Linear o objetivo é identificar uma equação linear que permita descrever o comportamento da variável resposta $Y$ utilizando valores conhecidos das covariáveis $X_1,X_2,\ldots,X_p$.

-   Ou seja, considera-se que a função $f(\cdot)$ tenha uma forma linear.

## Regressão Linear Simples

Temos apenas uma covariável no modelo. Um exemplo seria tentar modelar o quanto as despesas com propaganda inflenciam nas vendas de um determinado produto.

-   Variável resposta: *vendas*

-   Covariável: *gasto com propagandas*

## Regressão Linear Múltipla

Temos apenas duas ou mais covariáveis no modelo. Um exemplo seria tentar modelar o quanto as características de um imóvel influenciam no preço de venda do mesmo.

-   Variável resposta: *preço do imóvel*

-   Covariáveis: *área, no de quartos, no de banheiros, idade,...*

## Descrição do Modelo

-   A forma funcional é linear;

-   Considera-se apenas uma covariável;

-   Desse modo, temos $$Y=\beta_0+\beta_1X+\epsilon$$

-   $\beta_0$ e $\beta_1$ são valores desconhecidos (parâmetros) da reta que relaciona $X$ e $Y$;

-   $\beta_0$ é chamado de intercepto; e

-   $\beta_1$ é o coeficiente angular.

![](dados_pio.png){width="90%"}

## Gráfico do modelo

![](graf_pio.png){width="90%"}

# Aplicação em R

## Carregando Pacotes

-   Para exemplificar a estimação de um modelo de Regressão Linear em R vamos utilizar conjunto de dados `dados_imoveis.csv`.

-   Para isso primeiramente vamos carregar os pacotes necessários.

```{r}
#| label: pacotes
#| echo: true
#| warning: false

library(tidyverse)  # para organizar os dados
library(gtsummary)  # para organizar resultados em tabela
library(mixlm)      # para selecao de variaveis (stepwise)
```

## Carregando e Manipulando Dados

-   Carregue o arquivo `dados_imoveis.csv` utilizando o comando `read.csv()`.

```{r}
#| label: dados
#| echo: true

dados<- read.csv("dados_imoveis.csv", header=TRUE)
```

-   Dê uma olhada superficial na estrutura dos dados usando o comando `glimpse()`.

```{r}
#| label: view
#| echo: true

glimpse(dados)
```

-   Transforme a variável `piscina` em fator, em seguida Verifique as estatísticas descritivas utlizando o comando `summary()`.

```{r}
#| label: view2
#| echo: true

dados$piscina<- as.factor(dados$piscina)
summary(dados)
```

## Ajustando a Regressão Linear

-   Para ajustar/estimar um modelo de Regressão Linear devemos utilizar o comando `lm()`, ao qual devemos fornecer as seguintes informações: fórmula e dados.

-   Neste primero modelo consideremos que a variável `preco` dependa apenas de `area`.

```{r}
#| label: lm1
#| echo: true

modelo1<- lm(preco ~ area, data=dados)
```

## Modelo 2

-   Caso eu queira considerar um segundo modelo no qual `preco` dependa de todas as demais variável do conjunto de dados devemos utilizar os seguintes comandos:

```{r}
#| label: lm2
#| echo: true

modelo2<- lm(preco ~ area + idade + quartos + piscina, data=dados)
#modelo2<- lm(preco ~ . , data=dados)    # comando alternativo
```

## Visualizando os Modelos

-   A função `summary()` pode ser utilizada para visualizarmos um resumo do modelo estimado em forma de tabela.

-   Deve-se observar que este comando apresenta os resultados de uma forma um pouco poluída, porém bem completa.

-   Apliquemos este comando para o `modelo2`.

## Visualização - `summary()`

```{r}
#| echo: true

summary(modelo2)
```

## Visualização - `tbl_regression()`

-   Para uma visualização mais interpretável dos resultados, podemos utilizar o comando `tbl_regression()`

```{r}
#| message: false
#| warning: false
#| echo: true

tbl_regression(modelo2)
```

## Interpretação

-   Se a covariável é numérica, o acréscimo de 1 unidade nesta covariável espera-se um acréscimo de $\beta$ unidades na variável resposta.

-   Se a covariável é categórica, o fato de pertencer a certa classe espera-se um acréscimo de $\beta$ unidades na variável resposta.

-   O aumento de 1 unidade em `area` implica, em média, num acréscimo de 268.7 unidades monerátias no `preco`.

-   O aumento de 1 unidade em `idade` implica, em média, num decréscimo de 631.1 unidades monerátias no `preco`.

-   O aumento de 1 unidade em `quarto` implica, em média, num acréscimo de 21647.1 unidades monerátias no `preco`.

-   O fato do imóvel possuir piscina implica, em média, num acréscimo de 38880.2 unidades monerátias no `preco`.

-   **OBS**: Este tipo de interpretação só é possível para modelos sem interações entre as covariáveis.




## Modelos com Interação

-   Em um modelo de regressão o $Y$ pode depender linearmente de $X_1$, $X_2$ e do produto $X_1X_2$.

-   Desse modo, temos o modelo $$Y=\beta_0+\beta_1X_1+\beta_2X_2+\beta_3X_1X_2+\epsilon$$

-   No R, para considerar um modelo com interação podemos utilizar os seguintes comandos:

```{r}
#| label: intera1
#| echo: true

modelo3<- lm(preco ~ area + idade + area:idade, data=dados)
```

-   Caso eu queira considerar todas as interações possíveis das minha covariáveis devo utlizar o seguinte comando:

```{r}
#| label: intera2
#| echo: true

modelo4<- lm(preco ~ .^2, data=dados)
```

## Seleção de Variáveis

-   Dentre todas as variáveis do conjunto de dados, quais são as que interferem significativamente em `preco`?

-   Para determinar tais variáveis utilizamos o comando `backward()`.

-   O argumento que devemos utilizar nesta função seria o modelo ajustado com todas as variáveis e/ou todas as interações.

-   As variáveis que não são estatísticamente significativas são removidas do modelo.

```{r}
#| label: step
#| echo: true
#| warning: false
#| message: false

melhor_modelo<- backward(modelo4, alpha=0.1)
tbl_regression(melhor_modelo)
```

## Predição

-   Suponha que 2 imóveis estão para ser vendidos.

-   Suponha ainda não haver preço de venda para estes 2 imóveis.

-   Utilize a características destes, juntamente com o modelo estimado, para estimar seus preços.

-   Carregue o arquivo `novos_imoveis.csv` utilizando o comando `read.csv()`.

```{r}
#| label: dados_new
#| echo: true

novos<- read.csv("novos_imoveis.csv", header=TRUE)
```

-   Faça a predição/estimação de preço para estes 2 imóveis utilizando o comando `predict()`.

```{r}
#| label: pred
#| echo: true

preditos<- predict(modelo2, newdata=novos)
```

-   Para uma melhor visualização vamos concatenar as informações dos novos imóveis com suas respectivas predições/estimações de preço.

```{r}
#| label: pred_view
#| echo: true

cbind.data.frame(novos, preditos)
```
